#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the label for x axis
xlab("year on which board games were published") +
#Add the label for y axis
ylab("count")
yearpublished_graph
#Code for the second graph
#Draw the graph with minplayers as the x variable and maxplayers as the y variable
minplayers_maxplayers_graph <- ggplot(data = filtered_data, aes(x = minplayers, y = maxplayers, group = minplayers, color = minplayers, na.rm = TRUE)) +
#Draw the boxplot
geom_boxplot() +
#Change the limit for the y axis
ylim(0, 50) +
#set the theme to black and white
theme_bw() +
#Add a title to the graph
ggtitle("The correlation between minimum players and the maximum number of players") +
#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the caption for x axis
xlab("the minimum number of player") +
#Add the caption for y axis
ylab("the maximum number of player")
minplayers_maxplayers_graph
#Code for the first graph
library(dplyr)
library(ggplot2)
#read the csv data from an online csv file
board_game_original<- read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/docs/Projects/project1_bgdataviz/board_game_raw.csv")
#set board_game as a csv file and filter out games that are earlier than 1950 and have less than 25 ratings.
board_game <- as.data.frame.matrix(board_game_original)
filtered_data <- board_game %>%
filter(yearpublished >= 1950, users_rated >= 25)
#Draw a histogram to show the distribution of maximum number of players
maxplayers_graph<- ggplot(data=filtered_data, aes(x =maxplayers)) +
#set the histogram bar as light blue and fill it with sky blue
geom_histogram(color="light blue",fill="sky blue") +
#label each bar with the number of counts
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5) +
#set the x scale to from 1 to 20
xlim(1,20) +
#set the y scale to  from 0 to 80000
ylim(0,8000) +
#set the theme to black and white
theme_bw() +
#set the title of the graph
ggtitle("The distribution of maximum number of players in board games")+
#center the title of the graph
theme(plot.title = element_text(hjust = 0.5)) +
#set the caption of x axis
xlab("the maximum number of players") +
#set the caption of y axis
ylab("count")
maxplayers_graph
#Code for the fifth graph
#tidy up the column of mechanic and category with cSplit function
library(splitstackshape)
board_game_tidy <- cSplit(board_game,splitCols=c("mechanic","category"), sep = ",", direction = "long")
#use piping to isolate all the category and average complexity from board_game_tidy under conditions
new_category_complexity <- board_game_tidy %>%
filter(average_complexity > 0, yearpublished >= 1950, users_rated >= 25) %>%
select(category, average_complexity) %>%
group_by(category)
#Code for the fifth graph
#tidy up the column of mechanic and category with cSplit function
library(splitstackshape)
board_game_tidy <- cSplit(board_game,splitCols=c("mechanic","category"), sep = ",", direction = "long")
#use piping to isolate all the category and average complexity from board_game_tidy under conditions
new_category_complexity <- board_game_tidy %>%
filter(average_complexity > 0, yearpublished >= 1950, users_rated >= 25) %>%
select(category, average_complexity) %>%
group_by(category)
#Code for the fifth graph
#tidy up the column of mechanic and category with cSplit function
library(splitstackshape)
board_game_tidy <- cSplit(board_game,splitCols=c("mechanic","category"), sep = ",", direction = "long")
#use piping to isolate all the category and average complexity from board_game_tidy under conditions
library(dplyr)
new_category_complexity <- board_game_tidy %>%
filter(average_complexity > 0, yearpublished >= 1950, users_rated >= 25) %>%
select(category, average_complexity) %>%
group_by(category)
#eliminate all the NA in new_category_complexity
new_category_complexity <- na.omit(new_category_complexity)
#use piping to takes the mean of average complexity from rows with identical category and arrange category in descending order of mean complexity
new_category_complexity <- new_category_complexity %>%
group_by(category) %>%
mutate(my_average = mean(average_complexity)) %>%
select(-average_complexity) %>%
distinct()
#take the top 15 category with the highest mean complexity from
top15_average <- new_category_complexity %>%
arrange(desc(my_average)) %>%
head(15)
#Plot the relationship between the top 15 category with the highest level of average complexity
#create a bar graph
category_complexity_graph <- ggplot(data=top15_average, aes(x = reorder(category, -my_average), y = my_average, na.rm = TRUE)) +
geom_bar(stat = "identity",position = 'dodge', na.rm = TRUE, color="white",fill="sky blue") +
#set the scale of y-axis to a range of 0 to 3.5
ylim(0,3.5) +
#set the break unit of the y-axis to be 0.5 to show smaller difference
scale_y_continuous(breaks=seq(0, 3.5, 0.5)) +
# label the values in the top of bars
geom_text(aes(label=round(my_average, digits = 2)), position=position_dodge(width=0.005), vjust = -0.05, hjust=0.5) +
#set the background to be black and white
theme_bw() +
#set the title of the graph
ggtitle("Which category of board games has the highest level of average complexity") +
#set the caption of the x axis
xlab("category of board games") +
#set the caption of the y axis
ylab("average complexity of the board game") +
#set the size and angle of the categorical variable in x axis
theme(axis.text.x = element_text(size=10,angle = 45)) +
#center the title of the graph
theme(plot.title = element_text(hjust = 0.5))
#Code for the fourth graph
#Draw the graph with maxplaytime as the x variable and average_complexity as the y              variable
maxplaytime_average_complexity_graph <- ggplot(data = filtered_data, aes(x = yearpublished, y = average_complexity)) +
#Draw the point plot
geom_point(size = 0.1) +
#Add a trend line for the graph
geom_smooth(color="blue", size=2) +
#ylim(0, 10000) +
# Change the theme for the graph
theme_bw() +
#Add a title to the graph
ggtitle("The correlation between the year game was published and average complexity") +
#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the label for x axis
xlab("the year that the game was published") +
#Add the label for y axis
ylab("the average complexities of board games")
#Code for the first graph
library(dplyr)
library(ggplot2)
#read the csv data from an online csv file
board_game_original<- read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/docs/Projects/project1_bgdataviz/board_game_raw.csv")
#set board_game as a csv file and filter out games that are earlier than 1950 and have less than 25 ratings.
board_game <- as.data.frame.matrix(board_game_original)
filtered_data <- board_game %>%
filter(yearpublished >= 1950, users_rated >= 25)
#Draw a histogram to show the distribution of maximum number of players
maxplayers_graph<- ggplot(data=filtered_data, aes(x =maxplayers)) +
#set the histogram bar as light blue and fill it with sky blue
geom_histogram(color="light blue",fill="sky blue") +
#label each bar with the number of counts
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5) +
#set the x scale to from 1 to 20
xlim(1,20) +
#set the y scale to  from 0 to 80000
ylim(0,8000) +
#set the theme to black and white
theme_bw() +
#set the title of the graph
ggtitle("The distribution of maximum number of players in board games")+
#center the title of the graph
theme(plot.title = element_text(hjust = 0.5)) +
#set the caption of x axis
xlab("the maximum number of players") +
#set the caption of y axis
ylab("count")
maxplayers_graph
#Code for the second graph
#Draw the graph with minplayers as the x variable and maxplayers as the y variable
minplayers_maxplayers_graph <- ggplot(data = filtered_data, aes(x = minplayers, y = maxplayers, group = minplayers, color = minplayers, na.rm = TRUE)) +
#Draw the boxplot
geom_boxplot() +
#Change the limit for the y axis
ylim(0, 50) +
#set the theme to black and white
theme_bw() +
#Add a title to the graph
ggtitle("The correlation between minimum players and the maximum number of players") +
#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the caption for x axis
xlab("the minimum number of player") +
#Add the caption for y axis
ylab("the maximum number of player")
minplayers_maxplayers_graph
#Code for the first graph
library(dplyr)
library(ggplot2)
#read the csv data from an online csv file
board_game_original<- read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/docs/Projects/project1_bgdataviz/board_game_raw.csv")
#set board_game as a csv file and filter out games that are earlier than 1950 and have less than 25 ratings.
board_game <- as.data.frame.matrix(board_game_original)
filtered_data <- board_game %>%
filter(yearpublished >= 1950, users_rated >= 25)
#Draw a histogram to show the distribution of maximum number of players
maxplayers_graph<- ggplot(data=filtered_data, aes(x =maxplayers)) +
#set the histogram bar as light blue and fill it with sky blue
geom_histogram(color="light blue",fill="sky blue") +
#label each bar with the number of counts
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5) +
#set the x scale to from 1 to 20
xlim(1,20) +
#set the y scale to  from 0 to 80000
ylim(0,8000) +
#set the theme to black and white
theme_bw() +
#set the title of the graph
ggtitle("The distribution of maximum number of players in board games")+
#center the title of the graph
theme(plot.title = element_text(hjust = 0.5)) +
#set the caption of x axis
xlab("the maximum number of players") +
#set the caption of y axis
ylab("count")
maxplayers_graph
#Code for the second graph
#Draw the graph with minplayers as the x variable and maxplayers as the y variable
minplayers_maxplayers_graph <- ggplot(data = filtered_data, aes(x = minplayers, y = maxplayers, group = minplayers, color = minplayers, na.rm = TRUE)) +
#Draw the boxplot
geom_boxplot() +
#Change the limit for the y axis
ylim(0, 50) +
#set the theme to black and white
theme_bw() +
#Add a title to the graph
ggtitle("The correlation between minimum players and the maximum number of players") +
#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the caption for x axis
xlab("the minimum number of player") +
#Add the caption for y axis
ylab("the maximum number of player")
minplayers_maxplayers_graph
#Code for the third graph
#Draw the graph with filtered_data as the variable
yearpublished_graph <- ggplot(data = filtered_data, aes(yearpublished)) +
#Draw the histogram
geom_histogram(binwidth=0.5, color = "white", fill="sky blue") +
#Change the theme for the graph
theme_bw() +
#Add a title to the graph
ggtitle("The distribution of publication year of board games") +
#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the label for x axis
xlab("year on which board games were published") +
#Add the label for y axis
ylab("count")
yearpublished_graph
#Code for the fourth graph
#Draw the graph with maxplaytime as the x variable and average_complexity as the y              variable
maxplaytime_average_complexity_graph <- ggplot(data = filtered_data, aes(x = yearpublished, y = average_complexity)) +
#Draw the point plot
geom_point(size = 0.1) +
#Add a trend line for the graph
geom_smooth(color="blue", size=2) +
#ylim(0, 10000) +
# Change the theme for the graph
theme_bw() +
#Add a title to the graph
ggtitle("The correlation between the year game was published and average complexity") +
#Adjust the tile
theme(plot.title = element_text(hjust = 0.5)) +
#Add the label for x axis
xlab("the year that the game was published") +
#Add the label for y axis
ylab("the average complexities of board games")
maxplaytime_average_complexity_graph
#Code for the fifth graph
#tidy up the column of mechanic and category with cSplit function
library(splitstackshape)
board_game_tidy <- cSplit(board_game,splitCols=c("mechanic","category"), sep = ",", direction = "long")
#use piping to isolate all the category and average complexity from board_game_tidy under conditions
library(dplyr)
new_category_complexity <- board_game_tidy %>%
filter(average_complexity > 0, yearpublished >= 1950, users_rated >= 25) %>%
select(category, average_complexity) %>%
group_by(category)
#eliminate all the NA in new_category_complexity
new_category_complexity <- na.omit(new_category_complexity)
#use piping to takes the mean of average complexity from rows with identical category and arrange category in descending order of mean complexity
new_category_complexity <- new_category_complexity %>%
group_by(category) %>%
mutate(my_average = mean(average_complexity)) %>%
select(-average_complexity) %>%
distinct()
#take the top 15 category with the highest mean complexity from
top15_average <- new_category_complexity %>%
arrange(desc(my_average)) %>%
head(15)
#Plot the relationship between the top 15 category with the highest level of average complexity
#create a bar graph
category_complexity_graph <- ggplot(data=top15_average, aes(x = reorder(category, -my_average), y = my_average, na.rm = TRUE)) +
geom_bar(stat = "identity",position = 'dodge', na.rm = TRUE, color="white",fill="sky blue") +
#set the scale of y-axis to a range of 0 to 3.5
ylim(0,3.5) +
#set the break unit of the y-axis to be 0.5 to show smaller difference
scale_y_continuous(breaks=seq(0, 3.5, 0.5)) +
# label the values in the top of bars
geom_text(aes(label=round(my_average, digits = 2)), position=position_dodge(width=0.005), vjust = -0.05, hjust=0.5) +
#set the background to be black and white
theme_bw() +
#set the title of the graph
ggtitle("Which category of board games has the highest level of average complexity") +
#set the caption of the x axis
xlab("category of board games") +
#set the caption of the y axis
ylab("average complexity of the board game") +
#set the size and angle of the categorical variable in x axis
theme(axis.text.x = element_text(size=10,angle = 45)) +
#center the title of the graph
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
#Code for the sixth graph
#filter out datapoints whose average_complexity=0 and extract all board games with the non-zero average_complexity
board_game_without_0 <- filtered_data %>%
select(average_complexity,average_rating) %>%
filter(average_complexity > 0)
#Plot out the relationship between the average complexity and average ratings
#set average_complexity as as x and average_rating as y
rating_complexity_graph<- ggplot(data=board_game_without_0, aes(x = average_complexity, y = average_rating)) +
#use point graphs of size 0.1
geom_point(size=0.1) +
#Add a trendline of size 2 and color blue
geom_smooth(color="blue", size=2, method = "gam", formula = y ~ s(x, bs = "cs")) +
#set the title of the graph
ggtitle("The relationship between the average complexity and the average rating") +
#set the title of the x axis
xlab("average complexity of the board game") +
#set the title of the y axis
ylab("average rating of the board game") +
#center the title of the graph
theme(plot.title = element_text(hjust = 0.5)) +
#set the theme as black and white
theme_bw()
rating_complexity_graph
complexity_top_5_category <- board_game_tidy %>%
group_by(category) %>%
dplyr::summarise(mean_average_complexity = mean(average_complexity, na.rm=TRUE)) %>%
top_n(5, mean_average_complexity)
library(dplyr)
complexity_top_5_category <- board_game_tidy %>%
group_by(category) %>%
dplyr::summarise(mean_average_complexity = mean(average_complexity, na.rm=TRUE)) %>%
top_n(5, mean_average_complexity)
complexity_top_5_category
#Plot the relationship between the top 5 category with the highest level of average complexity
category_complexity_graph <- ggplot(data=top5_average, aes(x = category, y = my_average, na.rm = TRUE)) +
geom_bar(stat = "identity",position = 'dodge', na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,6) +
scale_y_continuous(breaks=seq(0, 6, 0.5)) +
geom_text(aes(label=round(my_average, digits = 2)), position=position_dodge(width=0.005), vjust = -0.05, hjust=0.5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=10, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
library(ggplot2)
complexity_top_5_category <- board_game_tidy %>%
group_by(category) %>%
dplyr::summarise(mean_average_complexity = mean(average_complexity, na.rm=TRUE)) %>%
top_n(5, mean_average_complexity)
complexity_top_5_category
#Plot the relationship between the top 5 category with the highest level of average complexity
category_complexity_graph <- ggplot(data=top5_average, aes(x = category, y = my_average, na.rm = TRUE)) +
geom_bar(stat = "identity",position = 'dodge', na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,6) +
scale_y_continuous(breaks=seq(0, 6, 0.5)) +
geom_text(aes(label=round(my_average, digits = 2)), position=position_dodge(width=0.005), vjust = -0.05, hjust=0.5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=10, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
library(ggplot2)
complexity_top_5_category <- board_game_tidy %>%
group_by(category) %>%
dplyr::summarise(mean_average_complexity = mean(average_complexity, na.rm=TRUE)) %>%
top_n(5, mean_average_complexity)
complexity_top_5_category
#Plot the relationship between the top 5 category with the highest level of average complexity
category_complexity_graph <- ggplot(data=complexity_top_5_category, aes(x = category, y = mean_average_complexity, na.rm = TRUE)) +
geom_bar(stat = "identity",position = 'dodge', na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,6) +
scale_y_continuous(breaks=seq(0, 6, 0.5)) +
geom_text(aes(label=round(my_average, digits = 2)), position=position_dodge(width=0.005), vjust = -0.05, hjust=0.5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=10, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
library(dplyr)
library(ggplot2)
complexity_top_5_category <- board_game_tidy %>%
group_by(category) %>%
dplyr::summarise(mean_average_complexity = mean(average_complexity, na.rm=TRUE)) %>%
top_n(5, mean_average_complexity)
complexity_top_5_category
#Plot the relationship between the top 5 category with the highest level of average complexity
category_complexity_graph <- ggplot(data=complexity_top_5_category, aes(x = category, y = mean_average_complexity, na.rm = TRUE)) +
geom_bar(stat = "identity",position = 'dodge', na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,6) +
scale_y_continuous(breaks=seq(0, 6, 0.5)) +
geom_text(aes(label=round(mean_average_complexity, digits = 2)), position=position_dodge(width=0.005), vjust = -0.05, hjust=0.5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=10, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
library(dplyr)
library(ggplot2)
board_game_tidy %>%
filter(category %in% names(top_5_category)) %>%
group_by(category) %>%
summarise(average_complexity = mean(average_complexity))
library(ggplot2)
average_complexity <- board_game_tidy %>%
filter(yearpublished >= 1950, users_rated >= 25, average_complexity>0 ) %>%
select(average_complexity)
category_complexity_graph <- ggplot(data=board_game_tidy, aes(x = reorder(category, -average_complexity), y = average_complexity, na.rm = TRUE)) +
geom_bar(stat = "identity", na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=5, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
library(dplyr)
library(ggplot2)
board_game_original<- read.csv("https://raw.githubusercontent.com/bryandmartin/STAT302/master/docs/Projects/project1_bgdataviz/board_game_raw.csv")
board_game <- as.data.frame.matrix(board_game_original)
filtered_data <- board_game %>%
filter(yearpublished >= 1950, users_rated >= 25)
#Question: what is the number of maximum players most commonly seen on all board games?
#Draw a bar graph to show the distribution of maximum number of players
maxplayers_graph<- ggplot(data=filtered_data, aes(x =maxplayers)) +
geom_histogram(color="light blue",fill="sky blue") +
stat_bin(binwidth=1, geom="text", aes(label=..count..), vjust=-1.5) +
xlim(1,20) +
ylim(0,8000) +
theme_bw() +
ggtitle("The distribution of maximum number of players in board games")+
theme(plot.title = element_text(hjust = 0.5)) +
xlab("the maximum number of players") +
ylab("count")
maxplayers_graph
library(ggplot2)
board_game_without_0 <- filtered_data %>%
select(average_complexity,average_rating) %>%
filter(average_complexity > 0)
rating_complexities_graph<- ggplot(data=board_game_without_0, aes(x = average_complexity, y = average_rating)) +
geom_point(size=0.1) +
geom_smooth(color="blue", size=2, method = "gam", formula = y ~ s(x, bs = "cs")) +
ggtitle("The relationship between the average complexity and the average rating of board games") +
xlab("average complexity of the board game") +
ylab("average rating of the board game") +
theme_bw()
rating_complexities_graph
#tidy up the column of mechanic and category with cSplit function
library(splitstackshape)
mechanic <- board_game$mechanic
board_game_tidy <- cSplit(filtered_data, splitCols=c("mechanic","category"), sep = ",", direction = "long")
library(ggplot2)
average_complexity <- board_game_tidy %>%
filter(yearpublished >= 1950, users_rated >= 25, average_complexity>0 ) %>%
select(average_complexity)
category_complexity_graph <- ggplot(data=board_game_tidy, aes(x = reorder(category, -average_complexity), y = average_complexity, na.rm = TRUE)) +
geom_bar(stat = "identity", na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=5, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
library(ggplot2)
average_complexity <- board_game_tidy %>%
filter(yearpublished >= 1950, users_rated >= 25, average_complexity>0 ) %>%
select(average_complexity)
category_complexity_graph <- ggplot(data=board_game_tidy, aes(x = stats::reorder(category, -average_complexity), y = average_complexity, na.rm = TRUE)) +
geom_bar(stat = "identity", na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=5, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
library(ggplot2)
average_complexity <- board_game_tidy %>%
filter(yearpublished >= 1950, users_rated >= 25, average_complexity>0 ) %>%
select(average_complexity)
category_complexity_graph <- ggplot(data=board_game_tidy, aes(x = stats::reorder(category, -average_complexity), y = average_complexity, na.rm = TRUE)) +
geom_bar(stat = "identity", na.rm = TRUE, color="white",fill="sky blue") +
ylim(0,5) +
theme_bw() +
ggtitle("Which category of board games has the highest level of average complexity") +
xlab("category of board games") +
ylab("average complexity of the board game") +
theme(axis.text.x = element_text(size=5, angle = 45)) +
theme(plot.title = element_text(hjust = 0.5))
category_complexity_graph
